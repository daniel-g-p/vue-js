1. COURSE INTRODUCTION
    - Two approaches when using Vue JS: Widget vs Full-Page
    - As opposed to vanilla JS, Vue JS starts from the end result that is to be achieved 

2. VUE JS BASICS
    - "Vue.createApp([OPTIONS OBJECT])" creates a Vue app that controls a specified HTML element and all its children
    - ".mount([CSS SELECTOR])" specifies the controlled HTML element
    - Predefined object options properties:
        - data: [FUNCTION]
            - Is always a function that returns an object
            - Anything specified in the return object can be used to manipulate CSS
            - Placing {{ [KEY FROM DATA()] }} in Vue-controlled HTML will convert into the value specified in the Vue app
        - methods: [OBJECT]
            - Is always an object that only contains functions/methods
            - Methods can be called inside interpolation syntax (e.g. "{{ functionInMethods() }}")
            - Methods can access all data() properties by using "this.[PROPERTY]"
        - computed: [OBJECT]
            - Similar to methods but aware of their dependencies
            - Are only re-executed in the browser if any dependencies change
            - Unlike methods, computed properties can't be called but only pointed to (ok: {{ computedProperty }}, not ok: {{ computedProperty }})
            - Work like methods behind the scenes, but are treated like data in HTML
            - Better than methods in most cases for performance
        - watch: [OBJECT]
            - Contains methods that have the same name as data properties
            - When the linked property changes, the watcher method will run
            - Watcher methods provide a "value" argument by default, equal to the value of the linekd data property
            - Could also accept two arguments, "oldValue" and "newValue"
            - Computed properties usually better than watcher methods because they can be linked to more than one data property
    - Interpolation: Using "{{ [VUE DATA REFERENCE] }}" (only available in between actual HTML tags, not within tags or in attributes)
    - All Vue JS directives for HTML start with "v-"
        - "v-bind:[ATTRIBUTE]=[VUE DATA REFERENCE]" used inside an opening tag enables referencing Vue data in attributes
        - "v-for=[VUE DATA ITEM] in [VUE DATA ARRAY]" creates on HTML element for each item in the specified array
        - "v-html=[HTML SPECIFIED IN VUE DATA]" enables HTML evaluation from Vue JS into HTML output
            - Not recommended for security reasons
    - All Vue data and methods are saved to a global "this" object accessible from within

3. VUE EVENTS
    - "v-on:[DOM EVENT]="method"" will call a specified method when an event is fired
    - Putting JavaScript logic into an HTML document with Vue is considered bad practice
    - Pointing at a method (v-on:[DOM EVENT]="method") instead of calling it (v-on:[DOM EVENT]="method()") grants access to the complete event object
    - "$event" is a built-in Vue parameter that can be used to access the event object event when a method is called (e.g. v-on:click="method($event, arg1)"
    - "v-on:event" followed by a ".event-modifier" allows you to modify the default behavior of an event
    - Modifiers may be chained onto each other (.prevent, .stop, etc.)
    - Modifier list: https://v3.vuejs.org/guide/events.html#event-modifiers
    - Key modifiers speficy the specific value of the event that will trigger it
    - "v-model="[VUE DATA REFERENCE]"" determines an input that is completely managed by Vue (shortcut for v-bind and v-on, called two-way binding)
    - PROBLEM: Vue will re-execute every method found in a controlled element, even if there is no need to re-run a particular method
    - SOLUTION: Computed properties

4. METHODS VS COMPUTED PROPERTIES VS WATCHERS
    - Methods:
        - Used for data binding and event binding
        - Best used for event binding that needs to be re-executed often
    - Computed properties:
        - Used for data binding only
        - Best used for data updates that depends on other data
    - Watchers:
        - Never used in the actual HTML code but always refer to the Vue data or computed object
        - Best used for non-data updates that depend on other data

5. VUE DIRECTIVES AND SHORTHANDS
    - v-bind:[DATA] (Shortcut: :)
    - v-on:[EVENT] (Shortcut: @)
    - v-once:[DATA]
    - v-for:[FOR LOOP]
    - v-model:[DATA]
    - v-if=[CONDITION]
    - v-else
    - v-show=[CONDITION]

6. DYNAMIC STYLING
    - "v-bind:style="{ cssProperty: 'value' }"" enables dynamic styling using camel casing with Vue (bad practice because of inline styles)
    - "v-bind:class="{ 'cssClass': boolean }"" will dynamically set styles using CSS classes instead of inline styles
    - Both PROPERTY and V-BIND:PROPERTY can be set on the same HTML element if need be
    - Ways to set dynamic styling in VUe:
        1. Place all static classes in the standard class attribute and bind all dynamic classes to return an object from Vue
        2. Place all classes in v-bind:class in the form of an array (e.g. v-bind:class="[staticClass, staticClass, computedProperty]")

7. CONDITIONALS
    - "v-if="testing-function"" only displays an HTML element if the expression returns true
    - "v-else-if="testing-function"" "v-else" and  can be used on an HTML element that is directly adjacent to an element with v-if
    - v-if, v-if-else, and v-else can remove elements entirely from the dom, whereas v-show only manages the visibility of the element
    - Syntaxes for v-for:
        - <div v-for="item in array">{{ item }}</div> 
        - <div v-for="(item, index) in array">{{ item }} - {{ index }}</div> 
    - v-for can also be used to loop through the values inside of an object with the same "item in array/object" syntax
    - v-for with objects can grant access to object keys with v-for="(value, key) in object"
    - Function arguments defined in a v-directive are available everywhere else inside that element
    - "v-bind:key" fixes the bug encountered in v-for elements by "locking" the element relative to the specified value
    - "v-for" should always be paired with "v-bind:key" and never be paired with "v-if" of "v-show"
    
8. VUE BEHIND THE scenes
    - Vue builds dynamic components using proxys ("new Proxy(data object, handler object")
    - Handler object contains default functions that define how the data object is managed when changes occur
    - There may be more than one Vue app in one script and on one page
    - One HTML part can only be controlled by one Vue app, and each Vue app can only control one HTML element
    - Setting 'ref="identifier"' on an HTML element and calling this.$refs.identifier in Vue returns the actual HTML element
    - Vue directives and properties are omitted from HTML when it is rendered
    - Upon data changes, Vue compares all the changes inside of a virtual DOM, not affecting performance on the page
    - Vue instance lifecycle:
        1. beforeCreate -> Empty Vue app is created
        2. create() -> Vue app now includes data, methods, etc.
        3. beforeMount() -> App template is compiled based on app content
        4. mounted() -> Browser renders the compiled Vue app
        5. beforeUpdate() -> Data changes in the Vue app are detected
        6. updated() -> Data is processed and updated in the DOM
        7. beforeUnmount() -> App termination request is detected
        8. unmounted() -> App is definitely terminated and shut down in the DOM
    - Instance lifecycle hooks can be added inside the Vue.createApp object

9. COMPONENTS
    - app.component([COMPONENT NAME], [COMPONENT OBJECT]) creates a new component in the context of the specified app
    - Component names should always contain a dash to avoid conflicts with built-in HTML tags
    - Components are similar to Vue apps in that they also have data, methods, computed properties etc.
    - Generally, an HTML template is defined in the component in the form of an HTML string
    - Components are implemented using regular HTML tags named with the attributed name
    - app.component() must always be called before app.mount()
    - "props" is an array inside a component's object specifying the dynamic properties that might be used on the component

10. VUE DEVELOPMENT ENVIRONMENT
    - "npm install -g @vue/cli" installs the latest version of the Vue command line interface
    - "vue --version" checks for the latest version installed
    - "vue create [PROJECT NAME]" creates a Vue project skeleton in the working directory
    - "npm run serve" starts a localhost server to run the Vue application

11. Starting a project from scratch
   1. Create directory
   2. Initiate Git repository (git init)
   3. Initiate NPM project (npm init -y)
   4. Create src and public folders (mkdir src public)
   5. Add index.html file with Vue app container
   6. Create app.js file in src folder
   7. Install Vue (npm install vue@next)
   8. Install Vue CLI service (npm install -D @vue/cli-service)
   9. Install Vue compiler (npm install -D @vue/compiler-sfc)

12. CASING CONVENTIONS
   - camelCasing: Inside of Vue app/component objects
   - PascalCasing: Imported objects and apps themselves
   - kebab-casing: Inside of HTML templates

13. DATA FLOWS
    - Vue uses monodirectional data-flows, meaning that a child component cannot modify a prop passed down from the parent by default
    - Props may be converted into a regular data property, which allows the component to change it internally
    - Prop validation can be done by passing props as a "property: type" object instead of an array
    - Individual props can be validated in detail by passing in an object similar to JOI or Mongoose (type, required, default, validator function)
    - this.$emit([kebab-cased-event], arguments...) fires an event that can be detected by a parent app
    - "props" is an array inside a component's object specifying the incoming properties that may be used on the component
    - "emits" is an array inside a component's object specifying the outgoing events that may be fired in the componenent
    - Emits aren't mandatory but are useful to document components and their data flows in both directions
    - An entire object can be passed with v-bind without any specified attribute (Props on the component still need to be specified one by one)
    - Events and properties that are defined on the parent template and are not defined on the child component will automatically fall through and be made available on the component under this.$attrs
    - The "provide" object specifies the data from a parent element that should be made available to all child and nested child components
    - The "inject" array imports the data provided by a parent component
    - Provide should rather be specified as a method that returns an object to reflect dynamic changes to the parent data
    - "Provide" as a method can simply access data under "this"
    - Events can be reverse-engineered so that the method to be called is provided in a parent component and injected in a child component. All data references will remain stable and this allows to avoid having to pass on emits one component at a time
    - Component-to-component communication doesn't work between siblings
    - Provide and inject should only be considered when there is more than one "pass-through" component in a row
    - Different ways of passing data:
        - PROPS: Passing data down to the next child component
        - EMITS: Passing data up to the next parent component
        - PROVIDES / INJECTS: Passing data down to all nested child components

14. ADVANCED COMPONENTS
    - Component imports can be moved to actual Vue files to create local components
    - Local components reduce the load time on application startup
    - "components" object specifies the names of imported components that will be used in this component
    - "scoped" keyword in style part will limit the defined styles to the current component
    - <slot></slot> tags inside of a template can define globally available components that can be reused across an app while also using scoped styling
    - Slots can carry names whenevere multiple are used in the same template
    - <template v-slot:[SLOT NAME]>[CONTENT]</template> specifies which slot the content is destined for
    - Components that use slots get access to "this.$slots" in the mounted() method
    - Wrapping slots in a container and using v-if on that container prevents empty HTML tags from being rendered
    - Scoped slots can be used to grant parent components access to the child's properties to be used in the component slots
    - Dynamic components with the Vue-specific <component> tag and the v-bind:is attribute will define the name of an HTML tag based on a CONDITION
    - Wrapping a <component> inside <keep-alive> tags ensures that user input ocurring in the component isn't lost whenever the component changes
    - <teleport to="[TARGET]"> enhances semantic placement of elements regardless of how they are treated in nested components

15. VUE JS CODE STYLE CONVENTIONS
    - Multi-word components
    - Props defined with object syntax with good detail (at least type should be defined)
    - v-for always paired with v-bind:key
    - v-for and v-if never to be used on the same element
    - scoped styles on all components except the root App
    - private methods defined outside of the Vue app object
    - separate file for each component
    - component files named with PascalCase or kebab-case
    - standard / static component files prefixed with "Base"
    - single instance component files prefixed with "The"
    - tightly coupled child components prefixed with parent name
    - words in component file names from general to specific
    - empty components defined with self-closing syntax
    - PascalCase everywhere except for DOM templates
    - full words over abbreviations for component naming
    - props defined in camelCase but passed in kebab-case
    - elements with multiple attributes spread across multiple lines
    - computed properties over built-in logic
    - computed properties modularized into multiple computed properties
    - HTML attributes always wrapped in quotes
    - directive shorthands used always or never
    - attribute order
        1. definition (is)
        2. list rendering (v-for)
        3. conditionals (v-if, v-else-if, v-else, v-show, v-cloak)
        4. render modifiers (v-pre, v-once)
        5. global identification (id)
        6. unique attributes (ref, key)
        7. two-way-binding (v-model)
        8. other
        9. events (v-on)
        10. contant (v-html, v-text)
    - consistent .vue file structure (template, script, style)
    - class selectors over element selectors in styles
    - props and events over provides, injects, and $parent
    - Vuex over this.$root for state management
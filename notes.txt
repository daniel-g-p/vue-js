1. COURSE INTRODUCTION
    - Two approaches when using Vue JS: Widget vs Full-Page
    - As opposed to vanilla JS, Vue JS starts from the end result that is to be achieved 

2. VUE JS BASICS
    - "Vue.createApp([OPTIONS OBJECT])" creates a Vue app that controls a specified HTML element and all its children
    - ".mount([CSS SELECTOR])" specifies the controlled HTML element
    - Predefined object options properties:
        - data: [FUNCTION]
            - Is always a function that returns an object
            - Anything specified in the return object can be used to manipulate CSS
            - Placing {{ [KEY FROM DATA()] }} in Vue-controlled HTML will convert into the value specified in the Vue app
        - methods: [OBJECT]
            - Is always an object that only contains functions/methods
            - Methods can be called inside interpolation syntax (e.g. "{{ functionInMethods() }}")
            - Methods can access all data() properties by using "this.[PROPERTY]"
        - computed: [OBJECT]
            - Similar to methods but aware of their dependencies
            - Are only re-executed in the browser if any dependencies change
            - Unlike methods, computed properties can't be called but only pointed to (ok: {{ computedProperty }}, not ok: {{ computedProperty }})
            - Work like methods behind the scenes, but are treated like data in HTML
            - Better than methods in most cases for performance
        - watch: [OBJECT]
            - Contains methods that have the same name as data properties
            - When the linked property changes, the watcher method will run
            - Watcher methods provide a "value" argument by default, equal to the value of the linekd data property
            - Could also accept two arguments, "oldValue" and "newValue"
            - Computed properties usually better than watcher methods because they can be linked to more than one data property
    - Interpolation: Using "{{ [VUE DATA REFERENCE] }}" (only available in between actual HTML tags, not within tags or in attributes)
    - All Vue JS directives for HTML start with "v-"
        - "v-bind:[ATTRIBUTE]=[VUE DATA REFERENCE]" used inside an opening tag enables referencing Vue data in attributes
        - "v-for=[VUE DATA ITEM] in [VUE DATA ARRAY]" creates on HTML element for each item in the specified array
        - "v-html=[HTML SPECIFIED IN VUE DATA]" enables HTML evaluation from Vue JS into HTML output
            - Not recommended for security reasons
    - All Vue data and methods are saved to a global "this" object accessible from within

3. VUE EVENTS
    - "v-on:[DOM EVENT]="method"" will call a specified method when an event is fired
    - Putting JavaScript logic into an HTML document with Vue is considered bad practice
    - Pointing at a method (v-on:[DOM EVENT]="method") instead of calling it (v-on:[DOM EVENT]="method()") grants access to the complete event object
    - "$event" is a built-in Vue parameter that can be used to access the event object event when a method is called (e.g. v-on:click="method($event, arg1)"
    - "v-on:event" followed by a ".event-modifier" allows you to modify the default behavior of an event
    - Modifiers may be chained onto each other (.prevent, .stop, etc.)
    - Modifier list: https://v3.vuejs.org/guide/events.html#event-modifiers
    - Key modifiers speficy the specific value of the event that will trigger it
    - "v-model="[VUE DATA REFERENCE]"" determines an input that is completely managed by Vue (shortcut for v-bind and v-on, called two-way binding)
    - PROBLEM: Vue will re-execute every method found in a controlled element, even if there is no need to re-run a particular method
    - SOLUTION: Computed properties

4. METHODS VS COMPUTED PROPERTIES VS WATCHERS
    - Methods:
        - Used for data binding and event binding
        - Best used for event binding that needs to be re-executed often
    - Computed properties:
        - Used for data binding only
        - Best used for data updates that depends on other data
    - Watchers:
        - Never used in the actual HTML code but always refer to the Vue data or computed object
        - Best used for non-data updates that depend on other data

5. VUE DIRECTIVES AND SHORTHANDS
    - v-bind:[DATA] (Shortcut: :)
    - v-on:[EVENT] (Shortcut: @)
    - v-once:[DATA]
    - v-for:[FOR LOOP]
    - v-model:[DATA]
    - v-if=[CONDITION]
    - v-else
    - v-show=[CONDITION]

6. DYNAMIC STYLING
    - "v-bind:style="{ cssProperty: 'value' }"" enables dynamic styling using camel casing with Vue (bad practice because of inline styles)
    - "v-bind:class="{ 'cssClass': boolean }"" will dynamically set styles using CSS classes instead of inline styles
    - Both PROPERTY and V-BIND:PROPERTY can be set on the same HTML element if need be
    - Ways to set dynamic styling in VUe:
        1. Place all static classes in the standard class attribute and bind all dynamic classes to return an object from Vue
        2. Place all classes in v-bind:class in the form of an array (e.g. v-bind:class="[staticClass, staticClass, computedProperty]")

7. CONDITIONALS
    - "v-if="testing-function"" only displays an HTML element if the expression returns true
    - "v-else-if="testing-function"" "v-else" and  can be used on an HTML element that is directly adjacent to an element with v-if
    - v-if, v-if-else, and v-else can remove elements entirely from the dom, whereas v-show only manages the visibility of the element
    - Syntaxes for v-for:
        - <div v-for="item in array">{{ item }}</div> 
        - <div v-for="(item, index) in array">{{ item }} - {{ index }}</div> 
    - v-for can also be used to loop through the values inside of an object with the same "item in array/object" syntax
    - v-for with objects can grant access to object keys with v-for="(value, key) in object"
    - Function arguments defined in a v-directive are available everywhere else inside that element
    - "v-bind:key" fixes the bug encountered in v-for elements by "locking" the element relative to the specified value
    - "v-for" should always be paired with "v-bind:key" and never be paired with "v-if" of "v-show"
    